//
//  XlsxDecoder.swift
//  AutoLocalizable
//
//  Created by Chancc on 2020/5/8.
//  Copyright ¬© 2020 Chancc. All rights reserved.
//

import UIKit
import CoreXLSX

/*
 
 ‰ΩøÁî®ÊñπÊ≥ïÔºåËØ∑Âú®ÁîµËÑëÊ®°ÊãüÂô®‰∏äË∑ë ÔºàREADME1„ÄÅREADME2Ôºâ
 
 1„ÄÅÂ∞Ü 1.xlsx Â§çÂà∂Âà∞Ê°åÈù¢ÔºåËøôÊòØ‰∏Ä‰∏™ÂØπÁÖßË°®ÂÅö‰∫ÜÂ¶Ç‰∏ãÊìç‰Ωú
 * ÂÖ®ÈÄâÔºàcmd + aÔºâÔºåÊ∏ÖÈô§Ë°®Ê†ºÊâÄÊúâÂÜÖÂÆπÁöÑÊ†ºÂºè
 * Âè™ËÉΩÊúâ‰∏ÄÂº†ÔºàSheet1ÔºâË°®Ê†º
 * Ê∏ÖÈô§Ë°®Ê†ºÂ§ö‰ΩôÁöÑË°å‰∏éÂàó(Ê≤°Áî®Âà∞ÁöÑË°å‰∏éÂàó)Ôºå‰∏çÊ∏ÖÈô§‰πüÊ≤°ÂÖ≥Á≥ª
 2„ÄÅËÆæÁΩÆËæìÂÖ•Êñá‰ª∂Ë∑ØÂæÑ let sourcePath = "/Users/xxx/Desktop/1.xlsx"
 3„ÄÅËÆæÁΩÆËæìÂá∫Ë∑ØÂæÑ let wirtePath = "/Users/xxx/Desktop/"
 */

/// ËæìÂÖ•Êñá‰ª∂Ë∑ØÂæÑ
let sourcePath = "/Users/zowell/Desktop/1.xlsx"
/// ËæìÂá∫Ë∑ØÂæÑ
let wirtePath = "/Users/zowell/Desktop/"

protocol XlsxDecoder {
    func decoder()
}

extension XlsxDecoder {
    
    /// Ëß£Êûê xlsx ÁîüÊàê .strings Êñá‰ª∂
    func decoder() {
        guard let file = XLSXFile(filepath: sourcePath) else {
            fatalError("XLSX file corrupted or does not exist")
        }
        guard let sharedStrings = try? file.parseSharedStrings() else {
            fatalError("SharedStrings ‚ùå‚ùå‚ùå")
        }
        let path = try? file.parseWorksheetPaths()
        let worksheet = try? file.parseWorksheet(at: path?.first ?? "")
        
        guard let lastColumn = worksheet?.data?.rows.last?.cells.last?.reference.column.value, let lastRow = worksheet?.data?.rows.last?.cells.last?.reference.row else {
            fatalError("Column && Row ‚ùå‚ùå‚ùå")
        }
        
        let columnInt = (lastColumn as NSString).character(at: 0)
        for column in 65...columnInt {
            let columnString = String(format: "%c", column)
            if columnString == "A" { continue }
            
            var lanString = worksheet?.cells(atColumns: [ColumnReference(String(format: "%c", column))!], rows: [1]).first?.stringValue(sharedStrings)
            print("------ \(lanString ?? "‚ùå") ------")
            /// Êñá‰ª∂Âêç lanString ‰∏çËßÑËåÉÔºåËßÑËåÉÂêéÂèØ‰ª•Áõ¥Êé•ÂÜôÂá∫ÊåáÂÆöÊñá‰ª∂ÂêçËæìÂá∫
            if let a = lanString?.contains("/"), a{
                lanString = lanString?.replacingOccurrences(of: "/", with: "")
            }
            let fileURL = URL(fileURLWithPath: wirtePath + "\(lanString ?? columnString).strings")
            var data: Data? = Data()
            data?.append("//\(lanString ?? "") \r\n".data(using: .utf8) ?? Data())
            
            for row in 1...lastRow {
                let IDString = worksheet?.cells(atColumns: [ColumnReference("A")!], rows: [row]).first?.stringValue(sharedStrings)
                let valueString = worksheet?.cells(atColumns: [ColumnReference(columnString)!], rows: [row]).first?.stringValue(sharedStrings)
                guard IDString != valueString, row != 1 else {
                    //ÂêåÂêçÂ≠óÁ¨¶‰∏≤Ôºö
                    //if row != 1 { print("\"\(IDString ?? "")\" = \"\(valueString ?? "")\";")}
                    continue
                }
                data?.append("\"\(IDString ?? "‚ùå")\" = \"\(rules(valueString) ?? "‚ùå")\";\r\n".data(using: .utf8) ?? Data())
            }
            try? data?.write(to: fileURL, options: .atomicWrite)
            print("üéâüéâüéâ :  \(lanString ?? "‚ùå") \((lanString != nil) ? "üòÄ" : "üò≠")")
        }
    }
    
    /// Â≠óÁ¨¶‰∏≤ËßÑÂàôÂåπÈÖç
    func rules(_ string: String?) -> String? {
        var value = string
        // Êúâ " ' Âä†ËΩ¨‰πâÁ¨¶Âè∑ \
        if let a = value?.contains("\""), a {
            if let a = value?.contains("\\\""), a {
                value = value?.replacingOccurrences(of: "\\\"", with: "\\\"")
            } else {
                value = value?.replacingOccurrences(of: "\"", with: "\\\"")
            }
        }
        if let a = string?.contains("\'"), a {
            if let a = value?.contains("\\\'"), a {
                value = value?.replacingOccurrences(of: "\\\'", with: "\\\'")
            } else {
                value = value?.replacingOccurrences(of: "\'", with: "\\\'")
            }
        }
        return value
    }
}
